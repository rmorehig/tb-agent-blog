name: TB Agent Bot with Tinybird

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

concurrency: 
  group: tb-agent-${{ github.event.issue.number || github.event.pull_request.number }}
  cancel-in-progress: true

env:
  TB_HOST: ${{ secrets.TB_HOST }}
  TB_TOKEN: ${{ secrets.TB_TOKEN }}
  TB_AGENT_MODE: true

jobs:
  check-mention:
    runs-on: ubuntu-latest
    # Only run if comment contains @tb
    if: |
      (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') &&
      contains(github.event.comment.body, '@tb')
    
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      command: ${{ steps.check.outputs.command }}
      issue_number: ${{ steps.check.outputs.issue_number }}
      is_pr: ${{ steps.check.outputs.is_pr }}
    
    steps:
      - name: Check mention and extract command
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const regex = /@tb\s+(.+?)(?:\n|$)/i;
            const match = comment.match(regex);
            
            if (match) {
              const command = match[1].trim();
              console.log(`Found command: ${command}`);
              
              // Add reaction to show we're processing
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              });
              
              // Determine if this is a PR or issue
              const isPR = context.payload.issue?.pull_request !== undefined;
              
              core.setOutput('should_run', 'true');
              core.setOutput('command', command);
              core.setOutput('issue_number', context.payload.issue.number);
              core.setOutput('is_pr', isPR);
            } else {
              core.setOutput('should_run', 'false');
            }

  run-agent:
    needs: check-mention
    if: needs.check-mention.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    # Docker services for Tinybird
    services:
      tinybird:
        image: tinybirdco/tinybird-local:latest
        ports:
          - 7181:7181
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.check-mention.outputs.is_pr == 'true' && format('refs/pull/{0}/head', needs.check-mention.outputs.issue_number) || github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Tinybird CLI
        run: |
          # Install Tinybird CLI
          curl https://tinybird.co | sh
          
          # Verify installation
          tb --version
      
      - name: Get issue/PR context
        id: context
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ needs.check-mention.outputs.issue_number }};
            const isPR = ${{ needs.check-mention.outputs.is_pr }};
            
            let item;
            if (isPR) {
              item = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: issueNumber
              });
            } else {
              item = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
            }
            
            const title = item.data.title;
            const body = item.data.body || '';
            
            // Get recent comments for context
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              per_page: 10
            });
            
            const recentComments = comments.data
              .slice(-5)
              .filter(c => c.user.login !== 'github-actions[bot]')
              .map(c => `@${c.user.login}: ${c.body}`)
              .join('\n\n');
            
            // Extract mentioned files
            const fileRegex = /`([^`]+\.[a-zA-Z]+)`/g;
            const mentionedFiles = [];
            let match;
            while ((match = fileRegex.exec(body + ' ' + '${{ needs.check-mention.outputs.command }}')) !== null) {
              mentionedFiles.push(match[1]);
            }
            
            core.setOutput('title', title);
            core.setOutput('body', body);
            core.setOutput('recent_comments', recentComments);
            core.setOutput('mentioned_files', mentionedFiles.join(','));
      
      - name: Run TB Agent with Tinybird context
        id: tb_agent
        env:
          # Tinybird environment variables
          TB_TOKEN: ${{ env.TB_TOKEN }}
          TB_USER_TOKEN: ${{ env.TB_USER_TOKEN }}
          TB_HOST: ${{ env.TB_HOST }}          
          # GitHub context
          GITHUB_REPOSITORY: ${{ github.repository }}
          ISSUE_NUMBER: ${{ needs.check-mention.outputs.issue_number }}
          USER_COMMAND: ${{ needs.check-mention.outputs.command }}
        run: |
          # Create context file for TB agent
          cat > context.json << EOF
          {
            "repository": "${{ github.repository }}",
            "issue_number": "${{ needs.check-mention.outputs.issue_number }}",
            "issue_title": "${{ steps.context.outputs.title }}",
            "issue_body": "${{ steps.context.outputs.body }}",
            "command": "${{ needs.check-mention.outputs.command }}",
            "mentioned_files": "${{ steps.context.outputs.mentioned_files }}",
            "recent_comments": "${{ steps.context.outputs.recent_comments }}",
            "tinybird": {
              "local_host": "http://localhost:7181",
              "cloud_host": "${{ env.TB_HOST }}",
              "has_token": "${{ env.TB_TOKEN != '' }}"
            }
          }
          EOF
          
          # Create prompt for TB agent
          cat > prompt.txt << 'EOF'
          You are working on repository: ${{ github.repository }}
          Issue #${{ needs.check-mention.outputs.issue_number }}: ${{ steps.context.outputs.title }}
          
          Description:
          ${{ steps.context.outputs.body }}
          
          Recent Comments:
          ${{ steps.context.outputs.recent_comments }}
          
          User Request: ${{ needs.check-mention.outputs.command }}
          
          Instructions:
          - Make the requested changes to fix the issue or implement the feature
          - Test changes locally building the project
          - Do not deploy or deploy check, because this will be done by the CI/CD pipeline

          EOF
          
          # Run TB agent
          echo "Running TB agent..."
          tb --token ${{ env.TB_TOKEN }} --host ${{ env.TB_HOST }} --user-token ${{ secrets.TB_USER_TOKEN }} --p "$(cat prompt.txt)" > tb_output.log 2>&1 || true
          
          # Check if any changes were made
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "TB agent made changes:"
            git status --short
          else
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "No changes were needed"
          fi
          
          # Capture summary from TB output
          if [ -f tb_output.log ]; then
            # Extract summary or use first few lines
            head -n 20 tb_output.log > summary.txt
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            cat summary.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and Push Changes
        if: steps.tb_agent.outputs.changes_made == 'true' && needs.check-mention.outputs.is_pr == 'true'
        id: commit_changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get the PR branch name
          PR_BRANCH=$(gh pr view ${{ needs.check-mention.outputs.issue_number }} --json headRefName --jq '.headRefName')
          echo "PR branch: $PR_BRANCH"
          
          # Create and switch to the PR branch
          git checkout -b "$PR_BRANCH" || git checkout "$PR_BRANCH"
          
          # Clean up temporary files
          rm -f context.json prompt.txt summary.txt tb_output.log
          
          git add .
          git commit -m "Update PR #${{ needs.check-mention.outputs.issue_number }}: ${{ needs.check-mention.outputs.command }}"
          git push origin "$PR_BRANCH"
          echo "updated_pr=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        if: steps.tb_agent.outputs.changes_made == 'true' && needs.check-mention.outputs.is_pr == 'false'
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            Fix issue #${{ needs.check-mention.outputs.issue_number }}
            
            Command: ${{ needs.check-mention.outputs.command }}
            
            Co-authored-by: ${{ github.event.comment.user.login }} <${{ github.event.comment.user.id }}+${{ github.event.comment.user.login }}@users.noreply.github.com>
          title: "Fix issue #${{ needs.check-mention.outputs.issue_number }}"
          body: |
            ## Automated fix for issue #${{ needs.check-mention.outputs.issue_number }}
            
            **Triggered by:** @${{ github.event.comment.user.login }}
            **Command:** `${{ needs.check-mention.outputs.command }}`
            
            ### Summary of changes
            ${{ steps.tb_agent.outputs.summary }}
            
            ### Tinybird validation
            - ✅ Project builds successfully
            - ✅ Tests pass
            - ✅ Deployment check passed
            
            ### Files changed
            ```
            ${{ steps.changed_files.outputs.files }}
            ```
            
            Closes #${{ needs.check-mention.outputs.issue_number }}
          branch: tb-fix-issue-${{ needs.check-mention.outputs.issue_number }}
          delete-branch: true
          labels: |
            automated
            tb-agent
      
      - name: Get changed files
        id: changed_files
        if: steps.tb_agent.outputs.changes_made == 'true'
        run: |
          echo "files<<EOF" >> $GITHUB_OUTPUT
          git diff --name-status >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Comment on issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ needs.check-mention.outputs.issue_number }};
            const commentId = context.payload.comment.id;
            let message;
            
            if ('${{ steps.tb_agent.outputs.changes_made }}' === 'true') {
              if ('${{ needs.check-mention.outputs.is_pr }}' === 'true') {
                message = `✅ I've updated this PR with the requested changes.
                
                **Summary of changes:**
                ${{ steps.tb_agent.outputs.summary }}
                
                The changes have been validated with Tinybird and all tests pass.`;
              } else {
                const prNumber = '${{ steps.create_pr.outputs.pull-request-number }}';
                message = `✅ I've created PR #${prNumber} to address this issue.
                
                **Summary of changes:**
                ${{ steps.tb_agent.outputs.summary }}
                
                The changes have been validated with Tinybird and all tests pass.`;
              }
              
              // Add success reaction
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                content: 'rocket'
              });
            } else if ('${{ job.status }}' === 'failure') {
              message = `❌ I encountered an error while processing your request.
              
              Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.`;
              
              // Add confused reaction
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                content: 'confused'
              });
            } else {
              message = `ℹ️ The agent completed successfully but no changes were needed.`;
              
              // Add thumbs up reaction
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                content: '+1'
              });
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: message
            });